---

---

<a href="javascript: void(0);" class="themeToggle">
  <svg
    width="18"
    height="18"
    viewBox="0 0 20 20"
    fill="currentColor"
    stroke="none"
  >
    <mask id="moon-mask">
      <rect x="0" y="0" width="20" height="20" fill="white"></rect>
      <circle cx="11" cy="3" r="8" fill="black"></circle>
    </mask>
    <circle class="sunMoon" cx="10" cy="10" r="8" mask="url(#moon-mask)"
    ></circle>
    <g>
      <circle class="sunRay sunRay1" cx="18" cy="10" r="1.5"></circle>
      <circle class="sunRay sunRay2" cx="14" cy="16.928" r="1.5"></circle>
      <circle class="sunRay sunRay3" cx="6" cy="16.928" r="1.5"></circle>
      <circle class="sunRay sunRay4" cx="2" cy="10" r="1.5"></circle>
      <circle class="sunRay sunRay5" cx="6" cy="3.1718" r="1.5"></circle>
      <circle class="sunRay sunRay6" cx="14" cy="3.1718" r="1.5"></circle>
    </g>
  </svg>
</a>

<style>
  .themeToggle {
    width: 28px;

    color: #bbb;
    position: relative;
    cursor: pointer;
    /* opacity: 0; */
    /* width: 100%; */
    aspect-ratio: 1;
  }

  .themeToggle svg {
    position: absolute;
    left: 0;
    width: 100%;
    height: 100%;
    transition: transform 0.4s ease;
    transform: rotate(40deg);
  }

  .themeToggle svg .sunMoon {
    transform-origin: center center;
    transition: inherit;
    transform: scale(1);
  }

  .themeToggle svg .sunRay {
    transform-origin: center center;
    transform: scale(0);
  }

  .themeToggle svg mask > circle {
    transition: transform 0.64s cubic-bezier(0.41, 0.64, 0.32, 1.575);
    transform: translate(0px, 0px);
  }

  .themeToggle svg .sunRay2 {
    animation-delay: 0.05s !important;
  }
  .themeToggle svg .sunRay3 {
    animation-delay: 0.1s !important;
  }
  .themeToggle svg .sunRay4 {
    animation-delay: 0.17s !important;
  }
  .themeToggle svg .sunRay5 {
    animation-delay: 0.25s !important;
  }
  .themeToggle svg .sunRay5 {
    animation-delay: 0.29s !important;
  }

  :global(.dark) .themeToggle svg {
    transform: rotate(90deg);
  }
  :global(.dark) .themeToggle svg mask > circle {
    transform: translate(16px, -3px);
  }
  :global(.dark) .themeToggle svg .sunMoon {
    transform: scale(0.55);
  }
  :global(.dark) .themeToggle svg .sunRay {
    animation: scaleOne 0.4s ease 0s 1 forwards;
  }

  @keyframes scaleOne {
    0% {
      transform: scale(0);
    }
    100% {
      transform: scale(1);
    }
  }
</style>
<script is:inline>
  // themeIcon
  let theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  if (theme === "light") {
    document.documentElement.classList.remove("dark");
  } else {
    document.documentElement.classList.add("dark");
  }

  window.localStorage.setItem("theme", theme || "");

  const handleToggleClick = (e) => {
    const transition = document.startViewTransition(() => {
      document.documentElement.classList.toggle("dark");

      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });

    transition.ready.then(() => {
      const { clientX, clientY } = e;
      const radius = Math.hypot(
        Math.max(clientX, innerWidth - clientX),
        Math.max(clientY, innerHeight - clientY)
      );
      const clipPath = [
        `circle(0% at ${clientX}px ${clientY}px)`,
        `circle(${radius}px at ${clientX}px ${clientY}px)`,
      ];
      const isDark = document.documentElement.classList.contains("dark");

      // 自定义动画
      document.documentElement.animate(
        {
          clipPath: isDark ? clipPath.reverse() : clipPath,
        },
        {
          duration: 400,
          pseudoElement: isDark
            ? "::view-transition-old(root)"
            : "::view-transition-new(root)",
        }
      );
    });
  };

  const toggles = document.getElementsByClassName("themeToggle");
  for (let toggle of toggles) {
    toggle.addEventListener("click", handleToggleClick);
  }
</script>
